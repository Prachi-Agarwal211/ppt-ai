NETHER AI – Supabase Schema and SQL Guide (Phase 1 MVP)

Overview
This document captures all database work for the Nether AI MVP per the Master Plan (Parts 1–3):
- Tables and RLS policies for presentations, assets, and profiles
- Helper trigger functions and triggers (set_updated_at, set_user_id)
- Recommended Storage bucket policies (UI steps preferred)
- Google Sign-In enablement steps (no SQL)
- Verification SQL (structural checks)
- Optional reset (drop) SQL

Environment variables (app .env.local)
Do not commit .env.local. Set these locally and on Vercel:
- NEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_PROJECT_URL
- NEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
- OPENROUTER_API_KEY=YOUR_OPENROUTER_API_KEY
- Optional: OPENROUTER_MODEL=z-ai/glm-4.5-air:free

Creation SQL (idempotent)
Run in Supabase SQL Editor once.

-- === Extensions ===
create extension if not exists pgcrypto;

-- === Helper trigger functions ===
create or replace function public.set_updated_at()
returns trigger language plpgsql as $$
begin
  new.updated_at = now();
  return new;
end; $$;

create or replace function public.set_user_id()
returns trigger language plpgsql as $$
begin
  if new.user_id is null then
    new.user_id = auth.uid();
  end if;
  return new;
end; $$;

-- === presentations table (MVP) ===
create table if not exists public.presentations (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  topic text not null default '',
  chosen_angle jsonb,
  slide_count int not null default 10,
  blueprint jsonb,
  recipes jsonb,
  status text not null default 'idea',
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create index if not exists presentations_user_updated_idx
  on public.presentations (user_id, updated_at desc);

drop trigger if exists trg_presentations_updated_at on public.presentations;
create trigger trg_presentations_updated_at
  before insert or update on public.presentations
  for each row execute procedure public.set_updated_at();

drop trigger if exists trg_presentations_set_user on public.presentations;
create trigger trg_presentations_set_user
  before insert on public.presentations
  for each row execute procedure public.set_user_id();

alter table public.presentations enable row level security;

drop policy if exists "presentations_select_own" on public.presentations;
create policy "presentations_select_own"
on public.presentations for select
using (user_id = auth.uid());

drop policy if exists "presentations_insert_own" on public.presentations;
create policy "presentations_insert_own"
on public.presentations for insert
with check (user_id = auth.uid());

drop policy if exists "presentations_update_own" on public.presentations;
create policy "presentations_update_own"
on public.presentations for update
using (user_id = auth.uid())
with check (user_id = auth.uid());

drop policy if exists "presentations_delete_own" on public.presentations;
create policy "presentations_delete_own"
on public.presentations for delete
using (user_id = auth.uid());

-- === assets table (optional Phase 1) ===
create table if not exists public.assets (
  asset_id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  presentation_id uuid references public.presentations(id) on delete cascade,
  type text check (type in ('image','doc','data')),
  file_name text,
  content_type text,
  size_bytes int,
  storage_path text,
  public_url text,
  created_at timestamptz not null default now()
);

drop trigger if exists trg_assets_set_user on public.assets;
create trigger trg_assets_set_user
  before insert on public.assets
  for each row execute procedure public.set_user_id();

alter table public.assets enable row level security;

drop policy if exists "assets_select_own" on public.assets;
create policy "assets_select_own"
on public.assets for select
using (user_id = auth.uid());

drop policy if exists "assets_insert_own" on public.assets;
create policy "assets_insert_own"
on public.assets for insert
with check (user_id = auth.uid());

drop policy if exists "assets_update_own" on public.assets;
create policy "assets_update_own"
on public.assets for update
using (user_id = auth.uid())
with check (user_id = auth.uid());

drop policy if exists "assets_delete_own" on public.assets;
create policy "assets_delete_own"
on public.assets for delete
using (user_id = auth.uid());

-- === profiles table (for auth metadata) ===
create table if not exists public.profiles (
  id uuid primary key,                     -- matches auth.users.id
  user_id uuid not null,                   -- redundant but convenient for RLS/index
  email text,
  first_name text,
  last_name text,
  username text unique,
  phone text,
  date_of_birth date,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create index if not exists profiles_user_idx on public.profiles (user_id);

drop trigger if exists trg_profiles_updated_at on public.profiles;
create trigger trg_profiles_updated_at
  before insert or update on public.profiles
  for each row execute procedure public.set_updated_at();

create or replace function public.set_profile_ids()
returns trigger language plpgsql as $$
begin
  if new.id is null then
    new.id := auth.uid();
  end if;
  if new.user_id is null then
    new.user_id := auth.uid();
  end if;
  return new;
end; $$;

drop trigger if exists trg_profiles_set_ids on public.profiles;
create trigger trg_profiles_set_ids
  before insert on public.profiles
  for each row execute procedure public.set_profile_ids();

alter table public.profiles enable row level security;

drop policy if exists "profiles_select_own" on public.profiles;
create policy "profiles_select_own"
on public.profiles for select
using (id = auth.uid());

drop policy if exists "profiles_insert_own" on public.profiles;
create policy "profiles_insert_own"
on public.profiles for insert
with check (id = auth.uid());

drop policy if exists "profiles_update_own" on public.profiles;
create policy "profiles_update_own"
on public.profiles for update
using (id = auth.uid())
with check (id = auth.uid());

Storage bucket (presentation-assets) and policies
- Create the bucket via Dashboard: Storage > Buckets > New bucket
  - id/name: presentation-assets, Public ON
- Add object policies via UI (recommended; owner-only SQL often blocked):
  1) Public read (Select): Using bucket_id = 'presentation-assets'
  2) Authenticated upload (Insert): Check bucket_id = 'presentation-assets' AND auth.role() = 'authenticated'
  3) Owner update (Update): Using & Check bucket_id = 'presentation-assets' AND auth.uid() = owner (fallback: use auth.role() = 'authenticated')
  4) Owner delete (Delete): Using bucket_id = 'presentation-assets' AND auth.uid() = owner (fallback: auth.role() = 'authenticated')

Google sign-in steps (Dashboard only)
- Google Cloud Console: Create OAuth 2.0 Client (Web).
  - Authorized redirect URI: https://YOUR-REF.supabase.co/auth/v1/callback
- Supabase > Authentication > Providers: Enable Google, paste Client ID/Secret.
- Supabase > Authentication > URL Configuration: Site URL (http://localhost:3000 for dev), add production URL later.

Verification SQL (structural checks)
Paste and run in SQL Editor; it reports existence of tables, columns, triggers, RLS, indexes, and policies.

-- Tables exist
select 'presentations table exists' as check, to_regclass('public.presentations') is not null as ok;
select 'assets table exists' as check, to_regclass('public.assets') is not null as ok;
select 'profiles table exists' as check, to_regclass('public.profiles') is not null as ok;

-- Required columns
select 'presentations columns ok' as check,
  (select count(*) from information_schema.columns
   where table_schema='public' and table_name='presentations'
     and column_name in ('id','user_id','topic','chosen_angle','slide_count','blueprint','recipes','status','created_at','updated_at')) = 10 as ok;

select 'assets columns ok' as check,
  (select count(*) from information_schema.columns
   where table_schema='public' and table_name='assets'
     and column_name in ('asset_id','user_id','presentation_id','type','file_name','content_type','size_bytes','storage_path','public_url','created_at')) = 10 as ok;

select 'profiles columns ok' as check,
  (select count(*) from information_schema.columns
   where table_schema='public' and table_name='profiles'
     and column_name in ('id','user_id','email','first_name','last_name','username','phone','date_of_birth','created_at','updated_at')) = 10 as ok;

-- Triggers present
select 'presentations updated_at trigger' as check,
  exists (
    select 1 from pg_trigger t
    join pg_class c on c.oid = t.tgrelid
    join pg_namespace n on n.oid = c.relnamespace
    where n.nspname='public' and c.relname='presentations' and t.tgname='trg_presentations_updated_at'
  ) as ok;

select 'presentations set_user trigger' as check,
  exists (
    select 1 from pg_trigger t
    join pg_class c on c.oid = t.tgrelid
    join pg_namespace n on n.oid = c.relnamespace
    where n.nspname='public' and c.relname='presentations' and t.tgname='trg_presentations_set_user'
  ) as ok;

select 'assets set_user trigger' as check,
  exists (
    select 1 from pg_trigger t
    join pg_class c on c.oid = t.tgrelid
    join pg_namespace n on n.oid = c.relnamespace
    where n.nspname='public' and c.relname='assets' and t.tgname='trg_assets_set_user'
  ) as ok;

select 'profiles updated_at trigger' as check,
  exists (
    select 1 from pg_trigger t
    join pg_class c on c.oid = t.tgrelid
    join pg_namespace n on n.oid = c.relnamespace
    where n.nspname='public' and c.relname='profiles' and t.tgname='trg_profiles_updated_at'
  ) as ok;

select 'profiles set_ids trigger' as check,
  exists (
    select 1 from pg_trigger t
    join pg_class c on c.oid = t.tgrelid
    join pg_namespace n on n.oid = c.relnamespace
    where n.nspname='public' and c.relname='profiles' and t.tgname='trg_profiles_set_ids'
  ) as ok;

-- RLS enabled flags
select 'presentations RLS enabled' as check,
  (select relrowsecurity from pg_class c join pg_namespace n on n.oid=c.relnamespace
    where n.nspname='public' and c.relname='presentations') as ok;

select 'assets RLS enabled' as check,
  (select relrowsecurity from pg_class c join pg_namespace n on n.oid=c.relnamespace
    where n.nspname='public' and c.relname='assets') as ok;

select 'profiles RLS enabled' as check,
  (select relrowsecurity from pg_class c join pg_namespace n on n.oid=c.relnamespace
    where n.nspname='public' and c.relname='profiles') as ok;

-- Index exists
select 'presentations_user_updated_idx exists' as check,
  exists (
    select 1 from pg_indexes
    where schemaname='public' and tablename='presentations' and indexname='presentations_user_updated_idx'
  ) as ok;

-- Policies exist (names)
select 'presentations policies count' as check,
  (select count(*) from pg_policies where schemaname='public' and tablename='presentations'
    and policyname in ('presentations_select_own','presentations_insert_own','presentations_update_own','presentations_delete_own')) = 4 as ok;

select 'assets policies count' as check,
  (select count(*) from pg_policies where schemaname='public' and tablename='assets'
    and policyname in ('assets_select_own','assets_insert_own','assets_update_own','assets_delete_own')) = 4 as ok;

select 'profiles policies count' as check,
  (select count(*) from pg_policies where schemaname='public' and tablename='profiles'
    and policyname in ('profiles_select_own','profiles_insert_own','profiles_update_own')) = 3 as ok;

-- (Optional) Storage policy presence check (will only work if you created via UI)
-- select policyname, permissive, roles, cmd, qual, with_check from pg_policies
-- where schemaname='storage' and tablename='objects' and policyname like '%presentation_assets%';

Optional: Reset/Drop SQL (use with care)
This removes all created objects (not Storage).

-- DROP POLICIES
drop policy if exists "presentations_select_own" on public.presentations;
drop policy if exists "presentations_insert_own" on public.presentations;
drop policy if exists "presentations_update_own" on public.presentations;
drop policy if exists "presentations_delete_own" on public.presentations;

drop policy if exists "assets_select_own" on public.assets;
drop policy if exists "assets_insert_own" on public.assets;
drop policy if exists "assets_update_own" on public.assets;
drop policy if exists "assets_delete_own" on public.assets;

drop policy if exists "profiles_select_own" on public.profiles;
drop policy if exists "profiles_insert_own" on public.profiles;
drop policy if exists "profiles_update_own" on public.profiles;

-- DROP TRIGGERS
drop trigger if exists trg_presentations_updated_at on public.presentations;
drop trigger if exists trg_presentations_set_user on public.presentations;
drop trigger if exists trg_assets_set_user on public.assets;
drop trigger if exists trg_profiles_updated_at on public.profiles;
drop trigger if exists trg_profiles_set_ids on public.profiles;

-- DROP TABLES
drop table if exists public.assets cascade;
drop table if exists public.presentations cascade;
drop table if exists public.profiles cascade;

-- DROP FUNCTIONS
drop function if exists public.set_updated_at() cascade;
drop function if exists public.set_user_id() cascade;
drop function if exists public.set_profile_ids() cascade;

End of document.

