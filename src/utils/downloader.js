// src/utils/downloader.js
let pptxgen;
// import toast from 'react-hot-toast'; // Already imported in store.js
// import { getElement } from './store'; // Already imported in store.js

/**
 * Generates and downloads a PPTX presentation from the current slides.
 * This function is updated to be more robust and handle potentially missing data.
 * @param {Array} slides - The array of slide objects from the Zustand store.
 */
async function validateImage(url) {
    try {
        const res = await fetch(url, { method: 'HEAD' });
        return res.ok;
    } catch {
        return false;
    }
}

export async function generatePptx(slides) {
    throw new Error('generatePptx disabled in production build due to node:fs bundling. Re-enable with server-side export or dynamic route.');
}

// Legacy client-side export kept for reference; not used in production build
export async function legacyGeneratePptx(slides) {
    if (!slides || slides.length === 0) {
        // Use a more user-friendly notification system if available, otherwise alert.
        toast.error("No slides available to generate a presentation.");
        return;
    }

    if (!pptxgen) {
        const mod = await import('pptxgenjs');
        pptxgen = mod.default || mod;
    }
    let pres = new pptxgen();

    // --- FIX: Safely get the presentation title from the first slide ---
    const firstSlideTitleElement = getElement(slides[0], 'title');
    const firstSlideTitle = firstSlideTitleElement?.content || "Untitled Presentation";

    pres.title = firstSlideTitle;
    pres.author = "Generated by Nether AI";
    pres.layout = "LAYOUT_16x9";

    for (const slideData of slides) {
        let slide = pres.addSlide();

        // --- FIX: Add defensive checks for every element before adding it to the slide ---
        const titleElement = getElement(slideData, 'title');
        const contentElement = getElement(slideData, 'content');
        const imageSuggestionElement = getElement(slideData, 'image_suggestion');

        // Add title only if it exists and has content
        if (titleElement && titleElement.content) {
            slide.addText(titleElement.content, {
                x: `${titleElement.position?.x || 5}%`,
                y: `${titleElement.position?.y || 10}%`,
                w: `${titleElement.size?.width || 90}%`,
                h: `${titleElement.size?.height || 15}%`,
                fontSize: 32,
                bold: true,
                color: "363636",
                align: 'center',
                valign: 'middle'
            });
        }

        // Add content points only if they exist and the content is a non-empty array
        if (contentElement && Array.isArray(contentElement.content) && contentElement.content.length > 0) {
             slide.addText(contentElement.content.join("\n"), {
                x: `${contentElement.position?.x || 10}%`,
                y: `${contentElement.position?.y || 30}%`,
                w: `${contentElement.size?.width || 80}%`,
                h: `${contentElement.size?.height || 60}%`,
                fontSize: 18,
                bullet: true
            });
        }

        // Add image only if a valid URL exists for the slide
        if (slideData.image_url && await validateImage(slideData.image_url)) {
            // Use the image suggestion element's layout if available, otherwise use a sensible fallback.
            const imageLayout = imageSuggestionElement || { position: { x: 25, y: 25 }, size: { width: 50, height: 50 } };
            slide.addImage({
                path: slideData.image_url,
                x: `${imageLayout.position?.x || 25}%`,
                y: `${imageLayout.position?.y || 25}%`,
                w: `${imageLayout.size?.width || 50}%`,
                h: `${imageLayout.size?.height || 50}%`
            });
        } else if (getElement(slideData, 'title')) {
            // Fallback: add a subtle placeholder box if no image
            const t = getElement(slideData, 'title');
            slide.addText('Image pending', {
                x: `${(t.position?.x || 5)}%`,
                y: `${(t.position?.y || 10) + 18}%`,
                w: `${(t.size?.width || 90)}%`,
                h: `10%`,
                fontSize: 14,
                color: '888888',
                align: 'center',
              });
        }
    }

    pres.writeFile({ fileName: `${firstSlideTitle.replace(/[^a-z0-9]/gi, '_')}.pptx` });
}