import pptxgen from "pptxgenjs";
import { getElement } from './store'; // Import our shared helper function

/**
 * Generates and downloads a PPTX presentation from the current slides.
 * This function is updated to read from the flexible 'elements' data structure.
 * @param {Array} slides - The array of slide objects from the Zustand store.
 */
export async function generatePptx(slides) {
    if (!slides || slides.length === 0) {
        alert("No slides available to generate a presentation.");
        return;
    }

    let pres = new pptxgen();

    // Use the first slide's title element for the presentation's metadata
    const firstSlideTitle = getElement(slides[0], 'title')?.content || "Untitled Presentation";
    pres.title = firstSlideTitle;
    pres.author = "Generated by Nether AI";

    // Define a standard 16:9 layout for all slides
    pres.layout = "LAYOUT_16x9";

    for (const slideData of slides) {
        let slide = pres.addSlide();

        // Find the relevant elements from the slide's 'elements' array
        const titleElement = getElement(slideData, 'title');
        const contentElement = getElement(slideData, 'content');
        const points = Array.isArray(contentElement?.content) ? contentElement.content : [];

        // Add title element if it exists, using its position and size
        if (titleElement) {
            slide.addText(titleElement.content, { 
                x: `${titleElement.position.x}%`, 
                y: `${titleElement.position.y}%`, 
                w: `${titleElement.size.width}%`, 
                h: `${titleElement.size.height}%`, 
                fontSize: 32, 
                bold: true, 
                color: "363636", 
                align: 'center',
                valign: 'middle'
            });
        }
        
        // Add content element (bullet points) if it exists, using its position and size
        if (contentElement) {
             slide.addText(points.join("\n"), { 
                x: `${contentElement.position.x}%`, 
                y: `${contentElement.position.y}%`, 
                w: `${contentElement.size.width}%`, 
                h: `${contentElement.size.height}%`,
                fontSize: 18, 
                bullet: true 
            });
        }
        
        // Add image if a URL exists for the slide
        if (slideData.image_url) {
            // Find the image suggestion element to get its intended layout
            const imageSuggestionElement = getElement(slideData, 'image_suggestion');
            if (imageSuggestionElement) {
                slide.addImage({ 
                    path: slideData.image_url, 
                    x: `${imageSuggestionElement.position.x}%`, 
                    y: `${imageSuggestionElement.position.y}%`, 
                    w: `${imageSuggestionElement.size.width}%`, 
                    h: `${imageSuggestionElement.size.height}%`
                });
            } else {
                // Fallback position if no suggestion element is found
                slide.addImage({ path: slideData.image_url, x: "50%", y: "25%", w: "45%", h: "65%" });
            }
        }
    }

    pres.writeFile({ fileName: `${firstSlideTitle}.pptx` });
}