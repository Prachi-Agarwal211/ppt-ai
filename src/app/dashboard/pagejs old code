'use client';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FiCpu, FiEdit, FiLayout, FiPlay, FiShare2, FiDownload, FiBriefcase, FiLogOut, FiLoader
} from 'react-icons/fi';
import { createClient } from '../../utils/supabase/client';
import { usePresentationStore } from '../../utils/store';

// Import Components
import { LeftSidebar } from './components/LeftSidebar';
import { OutlineView } from './components/OutlineView';
import { DeckView } from './components/DeckView';
import { IdeaView } from './components/IdeaView';
import { PresentationView } from './components/PresentationView';
import { ShareModal } from './components/ShareModal';
import { HistorySidebar } from './components/HistorySidebar';
import { AIChatSidebar } from './components/AIChatSidebar';
import { Header } from './components/Header';

export default function DashboardPage() {
  const supabase = createClient();
  const router = useRouter();

  const {
    slides, isGenerating, generationError, presentationsHistory,
    historyLoading, startPresentation, fetchHistory, loadPresentation
  } = usePresentationStore();

  const [loading, setLoading] = useState(true);
  const [view, setView] = useState('idea');
  const [isShareModalOpen, setIsShareModalOpen] = useState(false);
  const [isRightSidebarOpen, setIsRightSidebarOpen] = useState(true);

  useEffect(() => {
    const checkUser = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        router.replace('/');
      } else {
        setLoading(false);
        fetchHistory();
      }
    };
    checkUser();
  }, [router, fetchHistory, supabase.auth]);

  const handleLogout = async () => {
    await supabase.auth.signOut();
    router.push('/');
  };

  const handleStartPresentation = async (config) => {
    const success = await startPresentation(config);
    if (success) {
      setView('outline');
    }
  };
  
  const handleLoadHistoryItem = async (id) => {
    const success = await loadPresentation(id);
    if (success) {
      setView('outline');
    }
  };

  if (loading) return <main className="min-h-screen w-full bg-black flex items-center justify-center"><FiLoader className="text-4xl animate-spin text-white" /></main>;

  return (
    <main className="h-screen w-full text-white flex flex-col font-sans relative overflow-hidden bg-black/10">
      <div className="relative z-10 flex flex-col flex-grow h-full">
        <Header 
          view={view} 
          setView={setView} 
          onShare={() => setIsShareModalOpen(true)} 
          onPresent={() => setView('presentation')} 
          onLogout={handleLogout}
          slidesExist={slides.length > 0}
        />
        <div className="flex-grow flex overflow-hidden">
          <AnimatePresence>
            {(isGenerating || slides.length > 0) && (view === 'outline' || view === 'deck') && (
              <motion.aside 
                initial={{ width: 0, opacity: 0, padding: 0 }}
                animate={{ width: 288, opacity: 1, padding: '1rem' }}
                exit={{ width: 0, opacity: 0, padding: 0 }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                className="bg-black/20 border-r border-white/10 flex flex-col overflow-hidden"
              >
                <LeftSidebar />
              </motion.aside>
            )}
          </AnimatePresence>

          <main className="flex-grow p-6 flex flex-col overflow-y-auto">
            <AnimatePresence mode="wait">
              {view === 'idea' && (
                <IdeaView 
                  key="idea" 
                  onStart={handleStartPresentation} 
                  isGenerating={isGenerating}
                  error={generationError}
                />
              )}
              {view === 'outline' && <OutlineView key="outline" onProceed={() => setView('deck')} />}
              {view === 'deck' && <DeckView key="deck" />}
            </AnimatePresence>
          </main>

          <AnimatePresence>
            {isRightSidebarOpen && (
              <motion.aside 
                initial={{ width: 0, opacity: 0, padding: 0 }}
                animate={{ width: 352, opacity: 1, padding: '1rem' }}
                exit={{ width: 0, opacity: 0, padding: 0 }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                className="w-88 bg-black/20 border-l border-white/10 flex flex-col overflow-hidden"
              >
                {view === 'idea' && <HistorySidebar history={presentationsHistory} onLoad={handleLoadHistoryItem} isLoading={historyLoading} />}
                {(view === 'outline' || view === 'deck') && <AIChatSidebar />}
              </motion.aside>
            )}
          </AnimatePresence>
        </div>
      </div>
      <PresentationView 
        isVisible={view === 'presentation'} 
        onClose={() => setView('deck')} 
      />
      <ShareModal isOpen={isShareModalOpen} onClose={() => setIsShareModalOpen(false)} />
    </main>
  );
}