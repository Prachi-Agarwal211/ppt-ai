// src/app/api/export-pptx/route.js

import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

function getElement(slide, type) {
  if (!slide || !Array.isArray(slide.elements)) return undefined;
  return slide.elements.find((el) => el.type === type);
}

export async function POST(request) {
  try {
    const { slides } = await request.json();
    if (!Array.isArray(slides) || slides.length === 0) {
      return NextResponse.json({ error: 'No slides provided' }, { status: 400 });
    }

    const mod = await import('pptxgenjs');
    const PptxGenJS = mod.default || mod;
    const pres = new PptxGenJS();
    pres.layout = 'LAYOUT_16x9';

    const firstTitle = getElement(slides[0], 'title')?.content || 'Nether_AI_Presentation';
    pres.title = firstTitle;
    pres.author = 'Generated by Nether AI';

    for (const slideData of slides) {
      const s = pres.addSlide();
      const title = getElement(slideData, 'title');
      const content = getElement(slideData, 'content');
      const imageSuggestion = getElement(slideData, 'image_suggestion');

      if (title?.content) {
        s.addText(title.content, {
          x: `${title.position?.x ?? 5}%`,
          y: `${title.position?.y ?? 10}%`,
          w: `${title.size?.width ?? 90}%`,
          h: `${title.size?.height ?? 15}%`,
          fontSize: 32,
          bold: true,
          color: '363636',
          align: 'center',
          valign: 'middle',
        });
      }

      if (Array.isArray(content?.content) && content.content.length > 0) {
        s.addText(content.content.join('\n'), {
          x: `${content.position?.x ?? 10}%`,
          y: `${content.position?.y ?? 30}%`,
          w: `${content.size?.width ?? 80}%`,
          h: `${content.size?.height ?? 60}%`,
          fontSize: 18,
          bullet: true,
        });
      }

      if (slideData.image_url) {
        const imageLayout = imageSuggestion || { position: { x: 25, y: 25 }, size: { width: 50, height: 50 } };
        try {
          s.addImage({
            path: slideData.image_url,
            x: `${imageLayout.position?.x ?? 25}%`,
            y: `${imageLayout.position?.y ?? 25}%`,
            w: `${imageLayout.size?.width ?? 50}%`,
            h: `${imageLayout.size?.height ?? 50}%`,
          });
        } catch {
          // ignore image failures; continue
        }
      }
    }

    const buffer = await pres.write({ outputType: 'nodebuffer' });
    const headers = new Headers({
      'Content-Type': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
      'Content-Disposition': `attachment; filename="${firstTitle.replace(/[^a-z0-9]/gi, '_')}.pptx"`,
      'Cache-Control': 'no-store',
    });
    return new NextResponse(buffer, { headers, status: 200 });
  } catch (e) {
    return NextResponse.json({ error: e.message || 'Export failed' }, { status: 500 });
  }
}